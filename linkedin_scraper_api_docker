# Use uma imagem Node.js otimizada
FROM node:20-slim

# Configure ambiente para evitar prompts interativos
ENV DEBIAN_FRONTEND=noninteractive
ENV DEBCONF_NONINTERACTIVE_SEEN=true
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true

# Instale o Chrome
RUN apt-get update && apt-get install -y \
    wget \
    gnupg \
    && wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \
    && sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list' \
    && apt-get update \
    && apt-get install -y \
    google-chrome-stable \
    fonts-ipafont-gothic \
    fonts-wqy-zenhei \
    fonts-thai-tlwg \
    fonts-kacst \
    fonts-freefont-ttf \
    libxss1 \
    --no-install-recommends \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false

# Define diretório de trabalho
WORKDIR /app

# Copia arquivos package.json e package-lock.json
COPY package*.json ./

# Instala dependências do projeto
RUN npm ci --only=production

# Copia os arquivos restantes do projeto
COPY . .

# Cria estrutura de diretórios necessária
RUN mkdir -p /app/auth /app/jobs

# Define variáveis de ambiente para o Puppeteer
ENV PUPPETEER_EXECUTABLE_PATH=/usr/bin/google-chrome

# Expõe a porta do servidor
EXPOSE 8080

# Comando para iniciar a aplicação
CMD ["npm", "start"]
